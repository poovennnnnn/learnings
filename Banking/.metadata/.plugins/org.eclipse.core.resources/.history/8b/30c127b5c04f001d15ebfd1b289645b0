package com.banking.controller;


import java.security.Principal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.banking.dto.UserRequest;
import com.banking.entity.BankAccount;
import com.banking.entity.Customer;
import com.banking.entity.Offers;
import com.banking.entity.Role;
import com.banking.entity.User;
import com.banking.exception.AccountAlreadyExistsException;
import com.banking.exception.AccountNotFoundException;
import com.banking.repo.OffersRepo;
import com.banking.service.BankAccountService;
import com.banking.util.BankingUtil;

@RestController
@RequestMapping("/account")
@CrossOrigin(origins = "http://localhost:4200")
public class BankAccountController {

    @Autowired
    BCryptPasswordEncoder passwordEncoder;

    @Autowired
    private BankAccountService bankService;

    @Autowired
    private OffersRepo offerRepo;


    @Autowired
    private BankingUtil util;


    @PostMapping("/create")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<BankAccount> create(@RequestBody UserRequest userRequest) throws AccountAlreadyExistsException {

        if(bankService.existsByActNumber(userRequest.getActNumber())) {

            throw new AccountAlreadyExistsException("Account Not Found ac.no: "+userRequest.getActNumber());
        } 


        User user= new User();
        BankAccount account = new BankAccount();
        Customer customer = new Customer();
        Set<Role> role = new HashSet<Role>();
        role.add(new Role( "ROLE_USER","User Role"));
        customer.setFirstName(userRequest.getFirstName());
        customer.setLastName(userRequest.getLastName());
        customer.setCity(userRequest.getCity());
        customer.setPhone(userRequest.getPhone());

        account.setActNumber(util.getRandomNumber());
        account.setActCreationDate(new java.sql.Date(System.currentTimeMillis()));
        System.out.println(account.getActNumber());
        account.setActBalance(userRequest.getActBalance());
        account.setActType(userRequest.getActType());

        account.setCustomer(customer);

        //        String username = userRequest.getFirstName()+userRequest.getLastName();
        user.setUsername(userRequest.getUsername());
        user.setPassword(passwordEncoder.encode("pass@123"));
        user.setBankAccount(account);
        user.setRole(role);


        return new ResponseEntity<BankAccount>(bankService.create(user),HttpStatus.OK);
    }

    @PostMapping("/update")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<BankAccount> update(@RequestBody UserRequest userRequest) throws AccountNotFoundException {

        if(!bankService.existsByActNumber(userRequest.getActNumber())) {

            throw new AccountNotFoundException("Account Not Found ac.no: "+userRequest.getActNumber());
        } 


        BankAccount account = bankService.findByActNumber(userRequest.getActNumber());
        Customer customer = account.getCustomer();

        customer.setFirstName(userRequest.getFirstName());
        customer.setLastName(userRequest.getLastName());
        customer.setCity(userRequest.getCity());
        customer.setPhone(userRequest.getPhone());
        account.setActBalance(userRequest.getActBalance());
        account.setActType(userRequest.getActType());

        return new ResponseEntity<BankAccount>(bankService.update(account),HttpStatus.OK);
    }

    @GetMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<BankAccount>> findAllAccount(){

        List<BankAccount> accountList = bankService.findAll();

        return ResponseEntity.ok(accountList);        
    }


    @GetMapping("/{id}")
    @PreAuthorize(value = "hasAnyRole('ADMIN','USER')")
    public ResponseEntity<BankAccount> findById(@PathVariable int id, Principal principal) throws AccountNotFoundException{




        BankAccount account = bankService.findById(id);

        return ResponseEntity.ok(account);        
    }


    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> deleteById(@PathVariable int id) throws AccountNotFoundException{


        bankService.findById(id);
        bankService.deleteById(id);

        return new ResponseEntity<String>("Deleted Successfully",HttpStatus.OK);

    }


    @PostMapping("/offer/{id}")
    @PreAuthorize(value = "hasAnyRole('ADMIN','USER')")
    public ResponseEntity<String> availOffer(@PathVariable int id,@RequestBody Offers offer) throws AccountNotFoundException{

        BankAccount account = bankService.findById(id); 
        for(Offers tempOffer:account.getCustomer().getOffers()) {
            if(tempOffer.getOfferName() == offer.getOfferName()) {
                return new   ResponseEntity<>("Offer Already Availed",HttpStatus.OK);
            }
        }
        
       

        account.getCustomer().getOffers().add(offer);
        bankService.update(account);
        return new   ResponseEntity<>("Offer Availed Successfully",HttpStatus.OK);
    }


    @GetMapping("/offers/{id}")
    @PreAuthorize(value = "hasAnyRole('ADMIN','USER')")
    public ResponseEntity<Object> getOffer(@PathVariable int id) throws AccountNotFoundException{
        BankAccount account = bankService.findById(id);
        List<Offers> offerList = new ArrayList<Offers>();
//        List<String> strArr = new ArrayList<String>();
//        strArr.add("CREDITCARD");
//        strArr.add("HOMELOAN");
//        strArr.add("CARLOAN");
        
        String[] arr = {"CREDITCARD","HOMELOAN","CARLOAN"};
        
  
        for(String x :arr) {

            offerList.add(generateOffer(x, account));

        }

        return new ResponseEntity<>(offerList,HttpStatus.OK);
    }



    private Offers generateOffer(String str,BankAccount account) {

        Offers offer = new Offers();
        offer.setOfferName(str);

        int ageOfAccount = util.ageOfAccount(account.getActCreationDate());

        if(offer.getOfferName()== "CREDITCARD") {
            if(account.getActBalance() >= 10000) {
                offer.setAnnualFee(50);
            }else if(account.getActBalance() >= 7000 ) {
                offer.setAnnualFee(60);
            }else {
                offer.setAnnualFee(70);
            }

            if(ageOfAccount >= 10) {
                offer.setInterestRate(6);
            }else if(ageOfAccount >= 5) {
                offer.setInterestRate(7);
            }else {
                offer.setInterestRate(9);
            }

            if(account.getActBalance() >= 10000 && ageOfAccount >=10) {
                offer.setIntFreeCash(1000);
            }else if(account.getActBalance() >= 5000 && ageOfAccount >= 5) {
                offer.setIntFreeCash(500);
            }else {
                offer.setIntFreeCash(100);
            }

        }


        if(offer.getOfferName()== "HOMELOAN") {
            if(account.getActType()== "SAVINGS") {
                offer.setLoanAmmount(20000);
            }else if(account.getActType()== "CURRENT") {
                offer.setLoanAmmount(25000);
            }else {
                offer.setLoanAmmount(1000);
            }

            if(offer.getLoanAmmount() >= 25000) {
                offer.setInterestRate(6);
            }else if(offer.getLoanAmmount() >= 20000){
                offer.setInterestRate(7);
            }else {
                offer.setInterestRate(9);
            }


            if(offer.getInterestRate() == 7) {
                offer.setPreclosureCharges(100);
            }else  if(offer.getInterestRate() == 6){
                offer.setPreclosureCharges(80);

            }else {
                offer.setPreclosureCharges(20);
            }


        }

        if(offer.getOfferName()== "CARLOAN") {

            int fixedAmmount = 1000;
            int fixedInterest = 6;
            if(account.getActType()=="SAVINGS") {
                offer.setLoanAmmount(fixedAmmount+2000);
            }else if(account.getActType()=="CURRENT" ) {
                offer.setLoanAmmount(fixedAmmount+2500);
            }else {
                offer.setLoanAmmount(fixedAmmount);
            }

            if(account.getActBalance() >= 15000) {
                offer.setInterestRate(fixedInterest +1.5);
            }else if(account.getActBalance() >= 15000 & account.getActBalance() < 15000) {
                offer.setInterestRate(fixedInterest +1.2);
            }else {
                offer.setInterestRate(fixedInterest);
            }

            offer.setPreclosureCharges(0);
        }

        return offer;
    }


}
