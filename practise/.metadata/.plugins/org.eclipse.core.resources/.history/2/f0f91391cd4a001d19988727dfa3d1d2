package com.pooven.service;

import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.pooven.dto.User;
import com.pooven.repo.UserRepo;


@Service
public class UserServiceImpl  implements UserService , UserDetailsService{
	
	@Autowired
	private UserRepo repo;
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	@Override
	public Integer saveUser(User user) {
		//encrypt password wit bcrypt
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		return repo.save(user).getId();
	}

	@Override
	public Optional<User> findByUsername(String username) {
		return repo.findByUsername(username);
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
		Optional<User> optionalUser = repo.findByUsername(username);
		if(!optionalUser.isPresent()) {
			throw new UsernameNotFoundException(username+" does not Exists");
		}
		
		User user = optionalUser.get();
		
		
		return new org.springframework.security.core.userdetails.User(
				
				username,
				user.getPassword(),
				user.getRoles().stream()
				.map(role -> new SimpleGrantedAuthority(role))
				.collect(Collectors.toList())
				
				);
	}

	@Override
	public boolean existsByUserName(String username) {
		return repo.existsByUsername(username);
	}

	
}
